# Homework

import Foundation
/* Домашнее задание

 Формат файла ДР: «2l_ФИ.playground».
 1. Написать функцию, которая определяет, четное число или нет.
 2. Написать функцию, которая определяет, делится ли число без остатка на 3.
 3. Создать возрастающий массив из 100 чисел.
 4. Удалить из этого массива все четные числа и все числа, которые не делятся на 3.
 5. * Написать функцию, которая добавляет в массив новое число Фибоначчи, и добавить при помощи нее 100 элементов.
 Числа Фибоначчи определяются соотношениями Fn=Fn-1 + Fn-2.
 6. * Заполнить массив из 100 элементов различными простыми числами. Натуральное число, большее единицы, называется простым, если оно делится только на себя и на единицу. Для нахождения всех простых чисел не больше заданного числа n, следуя методу Эратосфена, нужно выполнить следующие шаги:

 a. Выписать подряд все целые числа от двух до n (2, 3, 4, ..., n).
 b. Пусть переменная p изначально равна двум — первому простому числу.
 c. Зачеркнуть в списке числа от 2 + p до n, считая шагом p..
 d. Найти первое не зачёркнутое число в списке, большее, чем p, и присвоить значению переменной p это число.
 e. Повторять шаги c и d, пока возможно.
 
*/

// Задание 1. 1. Написать функцию, которая определяет четное число или нет

func number (_ number1:Int) {
    
    if (number1 % 2 == 0) {
        print ("число четное")
    } else {
        print ("Число не четное")
    }
}
number (500)

// Задение 2. Написать функцию, которая определяет делится ли число без остатка на 3
func treeNumber (_ number3: Int) -> () {
    var n:Int = number3
    n = n % 3
    if (n == 0) {
        print ("Число \(number3) делится на 3 без остатка")
    } else {
        print ("Число \(number3) не делится на 3 без остатка. Остаток \(n)")
    }
}
for i in 1...20 {
treeNumber(i)
}

//Задание 3. Создать возрастающий массив из 100 чисел.
var numberArray:[Int] = []

for i in 1...100 {
    numberArray.append(i)
}
print ("Исходный массив: \(numberArray)")


//Задание 4. Удалить из этого массива все четные числа и все числа, которые не делятся на 3. ( т.е. остаются только нечетные которые деляться на 3)

for (_, value) in numberArray.enumerated() {
    if (value % 2) == 0 || (value % 3) != 0 {
        numberArray.remove(at: numberArray.firstIndex(of: value)!)
    }
}
print ("Измененный массив: \(numberArray)")

// еще раз с функцией
func A1 () {
var Array1:[Int] = [] //создаем пустой массив
for i in 0...99 {
    Array1.append(i)
}
print (Array1)
for (_, value) in Array1.enumerated() {  // метод перебирает массив
    if (value % 2) > 0 || (value % 3) > 0 {
        Array1.remove(at:Array1.firstIndex(of: value)!) // поиск индекса значения который передан
    }
}
 print(Array1)
}
A1()


// 5 * Написать функцию, которая добавляет в массив новое число Фибоначчи, и добавить при помощи нее 100 элементов.
// Числа Фибоначчи определяются соотношениями Fn=Fn-1 + Fn-2.

print("-------")
func fibonachi ()  {
    
    var fArray:[Double] = []
    var c1:Double = 0
    var c2:Double = 1
    var c3:Double = c1 + c2
        fArray.append(c1)
        fArray.append(c2)
    for i in 2...150 {
        c3 = c1 + c2
        fArray.insert(c3, at:i)
        c1 = c2
        c2 = c3
    }
    print(fArray)
}
fibonachi()


/*
6. * Заполнить массив из 100 элементов различными простыми числами. Натуральное число, большее единицы, называется простым, если оно делится только на себя и на единицу. Для нахождения всех простых чисел не больше заданного числа n, следуя методу Эратосфена, нужно выполнить следующие шаги:

a. Выписать подряд все целые числа от двух до n (2, 3, 4, ..., n).
b. Пусть переменная p изначально равна двум — первому простому числу.
c. Зачеркнуть в списке числа от 2 + p до n, считая шагом p..
d. Найти первое не зачёркнутое число в списке, большее, чем p, и присвоить значению переменной p это число.
e. Повторять шаги c и d, пока возможно.


*/

// решение найти не смог не понял алгоритм
