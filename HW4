import Foundation


/*
Домашнее задание 4
 
 1. Описать класс Car c общими свойствами автомобилей и пустым методом действия по аналогии с прошлым заданием.
 2. Описать пару его наследников trunkCar и sportСar. Подумать, какими отличительными свойствами обладают эти автомобили. Описать в каждом наследнике специфичные для него свойства.
 3. Взять из прошлого урока enum с действиями над автомобилем. Подумать, какие особенные действия имеет trunkCar, а какие – sportCar. Добавить эти действия в перечисление.
 4. В каждом подклассе переопределить метод действия с автомобилем в соответствии с его классом.
 5. Создать несколько объектов каждого класса. Применить к ним различные действия.
 6. Вывести значения свойств экземпляров в консоль.
 */

    enum EngineStatus {  // стватус двигателя
        case on, off
        var description: String {
            switch self  {
            case .on:
                return "Двигатель заведен"
            case .off:
                return "Двигатель заглушен"
            }
        }
    }
    enum WindowStatus { // Статус окон
        case opened, closed
        
        var description: String{ //описание окон
            switch self {
            case .opened:
                return "Окна открыты"
            case .closed:
                return "Окна закрыты"
            }
        }
    }
    enum TrunckBodyType {   // тип кузова
        case box, tank, refregerator
        
        var description: String {
            switch self {
            case .box:
                return "Стандартный кузов"
            case .tank:
                return "Цистерна"
            case .refregerator:
                return "Холодильная камера"
            }
        }
    }
    enum Action {
        case switchEngine (EngineStatus)
        case switchWindow (WindowStatus)
        case loadCargo (Double)
        case attachTruckBody (TrunckBodyType)
        case replaseTyres
        }

class Car {
    let brand:String
    let productionYear: Int
    var engine: EngineStatus = .off
    var windows: WindowStatus = .closed
    
    init(brand: String, productionYear:Int, engine: EngineStatus, windiws: WindowStatus ) {
        self.brand = brand
        self.productionYear = productionYear
        self.engine = .off
        self.windows = .closed
    }
    func perform (action: Action) {  // пустой метод для последующей коррекции
    }
}

class TrunkCar: Car {
    static var typeEmoji = "🚚"
    let maxCargoSpace: Double
    var currentCargoSpace: Double = 0
    var body: TrunckBodyType?
    
    var description: String {
        let bodyDescription = body?.description ?? "Отцеплен"
        return "\(TrunkCar.typeEmoji)\(brand)\nГод выпуска: \(productionYear)\nКузов: \(bodyDescription) \(currentCargoSpace)/\(maxCargoSpace)\nСостояние: \(engine) | \(windows)\n"
    }
    init(brand: String, productionYear: Int, maxCargoSpace:Double, body:TrunckBodyType?) {
        self.body = body
        self.maxCargoSpace = maxCargoSpace
        super.init(brand: brand, productionYear: productionYear, engine: .off, windiws: .closed)
    }
    override func perform(action: Action) { // определяем возможные дейстуия
        switch action {
        case .switchEngine(let status):
            engine = status
        case .switchWindow(let status):
            windows = status
        case.loadCargo(let load):
            guard body != nil else {
                return
            }
            let expectedLoad = load + currentCargoSpace
            switch expectedLoad  {
            case _ where expectedLoad > maxCargoSpace:
                currentCargoSpace = maxCargoSpace
            case _ where expectedLoad < 0:
                currentCargoSpace = 0
            default:
                currentCargoSpace += load
            }
        case .attachTruckBody(let newBody):
            self.body = newBody
            currentCargoSpace = 0
        default:
            break
        }
    }
}
    class SportCar: Car, CustomStringConvertible {
        var typeEmoji = "🚗"
        var zeroToHandredAcceleration: Double = 0.0
        var topSpeed:Int = 0
        
        var description: String {
            return "\(typeEmoji) \(brand)\nГод выпуска: \(productionYear)\nРазгон 0-100 км/ч: \(zeroToHandredAcceleration) c\nМаксимальной скоростью: \(topSpeed) км/ч\nСостояние: \(engine) | \(windows)\n"
        }
        init(brand: String, productionYear: Int, zeroToHandredAcceleration: Double, topSpeed: Int) {
            self.zeroToHandredAcceleration = zeroToHandredAcceleration
            self.topSpeed = topSpeed
            super.init(brand: brand, productionYear: productionYear, engine: .on, windiws: .opened)
        }
        override func perform(action: Action) {
            switch action {
            case .switchEngine(let status):
                engine = status
            case .switchWindow(let status):
                windows = status
            case .replaseTyres:
                print("Произведена замена шин!")
            default:
                break
            }
        }
    }

    var manTruck = TrunkCar(brand: "MAN LION PRO 640", productionYear: 2019, maxCargoSpace: 3000, body: nil)
    
manTruck.perform(action: .attachTruckBody(.tank))
manTruck.perform(action: .loadCargo (1500))
manTruck.perform(action: .switchEngine (.on))
print (manTruck)

var ferrari = SportCar(brand: "Ferrary", productionYear: 2017, zeroToHandredAcceleration: 3.4, topSpeed: 325)
ferrari.perform(action: .switchWindow(.closed))
ferrari.perform(action: .replaseTyres)
ferrari.perform(action: .switchEngine(.on))
print (ferrari)

TrunkCar.typeEmoji = "$$"
ferrari.typeEmoji = "!!"

print (ferrari)
print (manTruck)
